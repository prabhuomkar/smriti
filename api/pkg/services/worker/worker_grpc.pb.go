// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: worker.proto

package worker

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	MediaItemProcess(ctx context.Context, opts ...grpc.CallOption) (Worker_MediaItemProcessClient, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) MediaItemProcess(ctx context.Context, opts ...grpc.CallOption) (Worker_MediaItemProcessClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/services.worker.Worker/MediaItemProcess", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerMediaItemProcessClient{stream}
	return x, nil
}

type Worker_MediaItemProcessClient interface {
	Send(*MediaItemProcessRequest) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type workerMediaItemProcessClient struct {
	grpc.ClientStream
}

func (x *workerMediaItemProcessClient) Send(m *MediaItemProcessRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerMediaItemProcessClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	MediaItemProcess(Worker_MediaItemProcessServer) error
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) MediaItemProcess(Worker_MediaItemProcessServer) error {
	return status.Errorf(codes.Unimplemented, "method MediaItemProcess not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_MediaItemProcess_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).MediaItemProcess(&workerMediaItemProcessServer{stream})
}

type Worker_MediaItemProcessServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*MediaItemProcessRequest, error)
	grpc.ServerStream
}

type workerMediaItemProcessServer struct {
	grpc.ServerStream
}

func (x *workerMediaItemProcessServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerMediaItemProcessServer) Recv() (*MediaItemProcessRequest, error) {
	m := new(MediaItemProcessRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.worker.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MediaItemProcess",
			Handler:       _Worker_MediaItemProcess_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "worker.proto",
}
